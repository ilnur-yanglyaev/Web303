plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.netflix.dgs.codegen' version '7.0.3'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'javax.persistence:javax.persistence-api:2.2'
//	implementation 'jakarta.annotation:javax.annotation-api:3.0.0'
//	implementation 'javax.persistence:javax.annotationsi:2.2'
	implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.9'

	implementation 'org.hibernate:hibernate-core:6.5.2.Final' // Убедитесь, что используете последнюю стабильную версию

	// Hibernate Validator (если вам нужно валидация)
	implementation 'org.hibernate.validator:hibernate-validator:6.2.0.Final' // Убедитесь, что используете последнюю стабильную версию


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
	packageName = 'org.example.lab_2.codegen'
	generateClient = true
}

tasks.named('test') {
	useJUnitPlatform()
}
